一、何謂演算法 What's Algorithm
「演算法」這三個字近幾年可說是相當的火熱啊，感覺很容易就會聽到 youtube、facebook 又改演算法啦~
或者在阿發狗一戰成名之後，就很常聽見人家在討論什麼人工智慧演算法之類的。
在聽了很多人云亦云的概念後，那麼到底什麼是演算法

​如果我們從定義上來看： 由有限步驟所構成的集合，可以用於解決某一個特定的問題。 

覺得上面的文字敘述有一點費解嗎  沒關係，我們來舉一個生活一點的例子：​

Ok, 假設我們今天要解決的那一個特定問題是「把蘋果做成一杯蘋果汁」，
那我們可以透過以下幾個步驟來實現：
清洗蘋果
將蘋果削皮、去籽
將經過步驟(2) 處理的蘋果放入果汁機
在果汁機中加入一定比例的水
按下果汁機啟動按鈕
將果汁機裡面的蘋果汁倒入玻璃杯中
圖片
那麼你就可以說，上面那6個步驟就是  把蘋果做成一杯蘋果汁  的演算法。

而在電腦科學的領域也是如此！
我們透過設計一連串的指令、動作，讓電腦去執行，以便協助我們解決一些特定問題。
聽到這邊，有沒有覺得所謂的演算法，好像就是我們認知裡面的寫程式 
well, 如果你要這麼講，其實思路上大致對了！
在CS 領域有這麼一條著名的公式：
圖片
今天說穿了，其實演算法就是一種解決問題的邏輯思維！
而這樣的思維邏輯可以像上面那樣用文字，或者透過代碼、流程圖、電子電路、數學等等之類的​方式做描述。
​
二、演算法特性 Algorithm Features
關於這部分，當代CS領域大神－高德納(Donald Ervin Knuth) 在他的曠世巨作－《電腦程式設計藝術》裡已經幫我們整裡、歸納出一個演算法需要俱備的五個特性：
​輸入：一個演算法必須有零個或以上的輸入。
輸出：一個演算法應有一個或以上輸出，輸出是演算法計算的結果。
明確性：演算法的描述必須無歧義，以保證演算法的實際執行結果是精確地符合要求或期望，通常要求實際執行結果是確定的。
有限性：依據圖靈的定義，一個演算法是能夠被任何圖靈完備系統類比的一串運算，而圖靈機只有有限個狀態、有限個輸入符號和有限個轉移函式(指令)。而一些定義更規定演算法必須在有限個步驟內完成任務。
有效性：又稱可行性。演算法中描述的操作都是可以通過已經實現的基本運算執行有限次來實現。
​
覺得這段太咬文嚼字的話，不理它也沒關係。
在實務上你不需要特別去背這個，因為在寫程式的時候它已經是一種內化的觀念了。
唯一有可能需要去背這五個特性的，大概只有那些準備要考試的人了吧~
圖片
左邊為《電腦程式設計藝術》系列；右邊為《算法導論》是聖經本。
三、演算法的應用 Algorithm Applications
電腦的英文叫做 Computer，中文的意思是計算機，說穿了電腦只會傻傻的不斷幫你做0跟1的運算。
沒錯，就只是會做 0 跟 1 的運算，除此之外就沒有了、就沒有了！
所以說，電腦很笨、電腦超級笨、電腦TMD 有夠笨！

我想這時候一定會有人說 wait wait wait WHAT 不對欸 不對
電腦不是很聰明嗎  我看人家可以用電腦選土豆欸!
還可以自動化的生產、自動駕駛、AI語音助理、還打敗了人類棋王...

Jason 真的沒蓋你，電腦真的很笨！
BUT ( 讓整個人生變的不同就在這個BUT )，
電腦非常聽話 100% Obey you，你問他108減46等於多少，它不會跟你說 哈哈哈 唉唷我數學不好啦~
電腦幾乎不會算錯，基本上你已經可以當它完全不會算錯在用了。
電腦算的非常非常的快！
於是電腦科學家們就利用了電腦的這三個特性，發明了一種方法叫做 Programming，把現實世界需要解決的問題變成數學，丟給電腦來幫我們做運算。
因為電腦非常聽話，這時候人就可以透過撰寫代碼來教電腦要怎麼做某一件事，只是你教的方法是很聰明的，就會讓人有一種電腦很強大、很聰明的感覺。

電腦 + 程式設計 ( 資料結構 + 演算法 ) = 無所不能​

而所謂的 Computer 可不單單只是你擺在家裡的那台主機，具這樣計算能力最小的單位就是一塊晶片(MCU、MPU、DSP、SOC...)，而晶片早就被廣泛的應用在我們生活之中 e.g. 遙控器、平板、手機、電視、穿戴式裝置、汽機車的嵌入式電腦、火警系統、保全系統...

應該不難想像，只要有具備計算能力硬體在的地方，我們就需要演算法！
而現在工程師們也努力的用一個個偉大的算法來幫助建構我們這一個世界。也因為如此，所以其實也蠻容易在坊間看到叫作：無處不在的演算法、演算法統治世界、改變世界的XX演算法、統治世界的XX演算法之類的書。​​

最後我們再把觀念稍稍的做一個延伸，當今天「無所不能的電腦程式」碰上「無處不在的網際網路」就會變成時下非常夯的「物聯網 Internet of Things」。導讀：【物聯網】入門介紹－什麼是物聯網 What's IoT